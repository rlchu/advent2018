(conj [1] 4)
(conj [1 2 3] 4)
(str 234)
(vec (str 234))
(map int (vec (str 234)))
(mapv int (vec (str 1111)))
(map int (vec (str 1111)))
(str 1111)
(vec "1111")
(map int (vec "1111"))
(map num (vec "1111"))
(vec 1111)
(map num (vec "1111"))
(map int (vec "1111"))
(map int (vec "1112"))
(map rot13 (vec "1112"))
(map Int/parseInt (vec "1112"))
(map Integer/parseInt (vec "1112"))
(bigint "1")
(bigint "13")
(bigint )
(bigint \1)
(map Integer/parseInt (vec "1112"))
(map identity (vec "112"))
(conj '() 3)
(conj '(1 2) 3)
(re-seq #"[\d.]+" 1234)
(re-seq #"[\d.]+" "1234")
(bigint \1)
(Integer. 3)
(map Integer. [1 2])
(map #(Integer. %) [1 2])
(map #(Integer. %) [1 \2])
(map #(Integer. %) ["1" 2])
(map #(Integer. %) "111")
(split "111")
(string/split "111")
(core.string/split "111")
(map #(Character/digit % 10) (str 942))
(mapv #(Character/digit % 10 (str 111))
(mapv #(Character/digit % 10 (str 111)))
(
)
(mapv #(Character/digit % 10) (str 942))
(defn digits [number] (map #(Character/digit % 10) (str number)))
(digits 111)
(digits 1113)
(slurp 3)
(slurp day1-2017.input)
(slurp "day1-2017.input")
(Integer/parseInt "3")
(Integer/parseInt (slurp "day1-2017.input"))
(trim (slurp "day1-2017.input"))
(Integer/parseInt (slurp "day1-2017.input"))
(Integer/parseInt (slurp "day1-2017.input"))(Integer/parseInt  (slurp  "day1-2017.input"))
(Integer/parseInt  (slurp  "day1-2017.input"))
(Integer/parseInt  (clojure.string/trim-newline (slurp  "day1-2017.input")))
(bigint  (clojure.string/trim-newline (slurp  "day1-2017.input")))
